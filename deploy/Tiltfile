
# Build a docker image, possibly pulling an image from a shared registry instead of building.
#
# There are three use cases to cover:
# 1. I am working on the app in the image, always build and live_update
#      docker_build_with_latest('gcr.io/my-images/myapp', '.', ..., use_latest=False)
# 2. I'm not working on the app, pull the image from a shared registry,
#    fall back to local build if the image can't be pulled
#      docker_build_with_latest('gcr.io/my-images/myapp', '.', ..., use_latest=True)
# 3. I'm running `tilt ci`, build the image and push to the shared registry
#      docker_build_with_latest('gcr.io/my-images/myapp, '.', ...)
#
# Args specific to docker_build_with_latest:
#
#  use_latest(bool): True if Tilt should pull the :latest image from the shared registry
#       instead of building from scratch. Any provided value is ignored if the Tilt
#       subcommand is CI, when it is assumed to be false. Default: False
#  push_images(bool | string): True if `tilt ci` should push the built image to the
#       shared registry with a :latest tag. Pass string 'force' if image should be pushed
#       regardless of subcommand. Registry must already be authenticated
#       with `docker login` or a credential helper. Default: True
#

if os.name == 'nt':
    fail("Sorry! docker_build_with_latest is not yet compatible with Windows.")

def docker_build_with_latest(ref, context, live_update=[], ignore=[], use_latest=False, push_images=True, **kwargs):
    def is_push():
        return push_images == 'force' or (push_images and config.tilt_subcommand == "ci")

    # Validate that registry is part of the ref
    if ref.count("/") == 0:
        fail("Registry host is required in image when using docker_build_with_latest, but was missing: %s" % ref)

    if use_latest and config.tilt_subcommand != "ci":
        # Use case 2 - pull and use the latest image
        pulled_ref = str(local("docker pull -q %s 2> /dev/null || echo ''" % ref, quiet=True)).strip()

        if pulled_ref != "": # successfully pulled
            custom_build(
                ref,
                "docker tag %s $EXPECTED_REF" % pulled_ref,
                deps=[context],
                live_update=live_update,
                ignore=ignore
            )
            return

        print("Image %s not pulled, falling back to regular build" % ref)


    base = ref
    if is_push():
        base = ref+'-base'

    # Use case 1 and 3 - always build locally
    docker_build(base, context, live_update=live_update, ignore=ignore, **kwargs)

    if not is_push():
        return

    # Use case 3 - push the built image
    custom_build(
        ref,
        """
        docker tag $TILT_IMAGE_0 $EXPECTED_REF && \
          docker tag $TILT_IMAGE_0 {ref}:latest && \
          docker push {ref}:latest
        """.format(ref=ref),
        deps=[context],
        image_deps=[base]
    )
